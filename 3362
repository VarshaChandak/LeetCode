class Solution {
    public int maxRemoval(int[] nums, int[][] queries) {
        int queryIndex = 0;
        PriorityQueue<Integer> available = new PriorityQueue<>(Collections.reverseOrder());
        PriorityQueue<Integer> running = new PriorityQueue<>();
        Arrays.sort(queries, (a, b) -> Integer.compare(a[0], b[0]));

        for (int i = 0; i < nums.length; i++) {
            while (queryIndex < queries.length && queries[queryIndex][0] <= i) {
                available.offer(queries[queryIndex++][1]);
            }

            while (!running.isEmpty() && running.peek() < i) {
                running.poll();
            }

            while (nums[i] > running.size()) {
                if (available.isEmpty() || available.peek() < i) {
                    return -1;
                }
                running.offer(available.poll());
            }
        }
        return available.size();
    }
}
