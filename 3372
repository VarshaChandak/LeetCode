class Solution {
    public void help(int i, int par, int dis, int root, int k, int[] good, List<List<Integer>> adj) {
        if (dis >= k)
            return;
        good[root]++;
        for (int nbs : adj.get(i)) {
            if (nbs != par)
                help(nbs, i, dis + 1, root, k, good, adj);
        }
    }
    public int[] maxTargetNodes(int[][] edges1, int[][] edges2, int k) {
        int n = edges1.length + 1;
        int m = edges2.length + 1;
        List<List<Integer>> adj1 = new ArrayList<>(n);
        List<List<Integer>> adj2 = new ArrayList<>(m);

        for (int i = 0; i < n; i++)
            adj1.add(new ArrayList<>());
        for (int i = 0; i < m; i++)
            adj2.add(new ArrayList<>());
        for (int[] e : edges1) {
            int u = e[0], v = e[1];
            adj1.get(u).add(v);
            adj1.get(v).add(u);
        }
        for (int[] e : edges2) {
            int u = e[0], v = e[1];
            adj2.get(u).add(v);
            adj2.get(v).add(u);
        }
        int[] good1 = new int[n];
        for (int i = 0; i < n; i++) {
            help(i, -1, 0, i, k + 1, good1, adj1);
        }
        int[] good2 = new int[m];
        for (int i = 0; i < m; i++) {
            help(i, -1, 0, i, k, good2, adj2);
        }
        int mx = Arrays.stream(good2).max().getAsInt();
        int[] ans = new int[n];
        for (int i = 0; i < n; i++) {
            ans[i] = good1[i] + mx;
        }
        return ans;
    }
}
